[project]
name = "docnetagent"
version = "0.1.0"
description = "A blueprint for an agentnetwork for document information extraction"
authors = [
    { name = "Sven Bulach", email = "sven.bulach@prodyna.com" },
    { name = "Martin Kruse", email = "martin.kruse@prodyna.com" }
]
requires-python = ">=3.12"

dependencies = [
    "pydantic==2.10.6",
    "langchain==0.3.19",
    "openai==1.63.2",
    "python-dotenv==1.0.1",
    "azure-cosmos==4.9.0",
    "azure-ai-documentintelligence==1.0.0",
    "azure-core==1.32.0",
    "pillow==11.1.0",
    "langchain-openai==0.3.6",
    "aiohappyeyeballs==2.4.6",
    "aiohttp==3.11.12",
    "aiosignal==1.3.2",
    "annotated-types==0.7.0",
    "anyio==4.8.0",
    "attrs==25.1.0",
    "certifi==2025.1.31",
    "charset-normalizer==3.4.1",
    "distro==1.9.0",
    "frozenlist==1.5.0",
    "greenlet==3.1.1",
    "h11==0.14.0",
    "httpcore==1.0.7",
    "httpx==0.28.1",
    "idna==3.10",
    "isodate==0.7.2",
    "jiter==0.8.2",
    "jsonpatch==1.33",
    "jsonpointer==3.0.0",
    "langchain-core==0.3.37",
    "langchain-text-splitters==0.3.6",
    "langgraph==0.2.74",
    "langgraph-checkpoint==2.0.16",
    "langgraph-sdk==0.1.53",
    "langsmith==0.3.8",
    "msgpack==1.1.0",
    "multidict==6.1.0",
    "numpy==2.2.3",
    "orjson==3.10.15",
    "packaging==24.2",
    "propcache==0.3.0",
    "pydantic-core==2.27.2",
    "pyyaml==6.0.2",
    "regex==2024.11.6",
    "requests==2.32.3",
    "requests-toolbelt==1.0.0",
    "six==1.17.0",
    "sniffio==1.3.1",
    "sqlalchemy==2.0.38",
    "tenacity==9.0.0",
    "tiktoken==0.9.0",
    "tqdm==4.67.1",
    "typing-extensions==4.12.2",
    "urllib3==2.3.0",
    "yarl==1.18.3",
    "zstandard==0.23.0",
    "azure-storage-blob>=12.24.1",
    "pdf2image>=1.17.0",
    "pymupdf>=1.25.3",
]

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".git",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "dist",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 160
indent-width = 4
target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
